1) To install Java 17 on Amazon:

 I) Linux
    sudo dnf update -y
		sudo dnf install java-17-amazon-corretto -y
		java -version
II) Ubuntu
    sudo apt update 
    sudo apt install openjdk-17-jre-headless -y
    java -version
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Jenkins Tool - Instal and Configure 

By creating a file by using command vi <file name> then press "i" and paste the given comments below as per the Opertaing system. after paste press "q" and type ':wq' . After give ls if file is create or not, then we want to execute the command give the permission to execute the file by "sudo chmod +x <filename>. after give execte commad for file to install jenkins by ./filename

I) Linux

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo dnf install java-17-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins

II) Ubuntu

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins -y




After creating a pipeline we must give the some line that are in below paste in the extreme below the line of command
sudo visudo

Note: #Add the following line at the end of the file, assuming the Jenkins user is 'jenkins'
jenkins ALL=(ALL) NOPASSWD: /bin/cp

paste the command above mentioned after give 
ctrl+O and ctrl+X then press enter


     <server>
      <id>maven-releases</id>
      <username>admin</username>
      <password>sethu</password>
     </server>

     <server>
      <id>maven-snapshots</id>
      <username>admin</username>
      <password>sethu</password>
     </server>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Apache Tomacat installation

https://tomcat.apache.org/download-90.cgi  -  Visit these link

right click and copy the link address of (tar.gz)

sudo wget <tar.gz url>
ls
file in red colour
tar -xvf <extraded tar file>

ls
cd bin/
./starup.sh/

change port number in conf directory in server.xml file 
vi server.xml file --> scroll down to connector port change 8080 to 9090 press esc :wq
Note: whenever we change the conf file we must shutdown the tomcat and restart tomcat

go to webapps 
in tha cd manager
cd META-INF
vi context.xml

press "I" and change in below on the "allow=".*"/>"

go to comf folder open by <vi apache.tomcat.xml>
scroll below before the </tomcat-users> paste the below content

With out manager-script
<role rolename="manager-gui" />
<user username="tomcat" password="tomcat" roles="manager-gui" />
<role rolename="admin-gui" />  
<user username="admin" password="admin" roles="manager-gui,admin-gui"/>

With manager-script
<role rolename="manager-gui" />
<user username="tomcat" password="tomcat" roles="manager-gui" />
<role rolename="admin-gui" />  
<role rolename="manager-script" />
<user username="admin" password="admin" roles="manager-gui,admin-gui,manager-script"/>







-------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) SonaQube Install















-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Docker tool -Install and configure

I) Ubuntu
install command
sudo apt-get install docker.io

Permission Commmand
sudo chmod 666 /var/run/docker.sock

Docker commands install sonarqube
docker run -d --name sonarqube -p 9000:9000 sonarqube:lts-community

docker run ---> run a container
-d ---> detached mode
--name <container name(any)> running container name
-p 9000:9000 port mapping of sonarqube
sonarqube:lts-community ---> image of running container

"docker images" to see the image of the conatainer
"docker ps" to see the name of the container


Ubuntu -->

vi docker.sh

Ubuntu(ii)

sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
apt-cache policy docker-ce
sudo apt install docker-ce -y
sudo systemctl status docker

Ubuntu(i)

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update


Lets give the permission to docker.sh file to execute; sudo chmod +x docker.sh
ls  ---> You can see 'docker.sh' in green colour which means the file is executable

Lets execute the docker.sh file; ./docker.sh

Install the Docker packages - To install the latest version;
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo su

docker --version ---> You can see the docker version

Lets setup Nexus using Docker image
docker run -d --name nexus3 -p 8081:8081 sonatype/nexus3
docker run -d --name=<nameofcontainer> -P -v <pathoftheVM>:<Pathof container> continaer

-d ---> detached file
--name= ---> unique name to give the container
-P ---> port number automatically they make (or) -p ---> port number we have to give like (-p 8090:80) inthat 80 is defauld port number

Container like HTTPD, Tomcat, Nginx

httpd===> /usr/local/apache2/htdocs/
tomcat===> /usr/local/tomcat/webpps/
nginx===> /usr/share/nginx/html/

These are the default path of the container which deponds upon the what we want at real time scenario.


docker ps ---> you can see the container running

Open Port number 8081 for VM

docker exec -it ContainerID /bin/bash
ContainerID can see when give the command of docker ps
ls ---> You can see the nexus related files ---> 
cd sonatype-work/ ---> 
cd nexus3/ ---> 
You can see 'admin.password' file ---> 
cat admin.password ---> Copy the password, dont copy 'bash-4.4' --->
Goto the nexus connected tab in browser --->

sign in as username admin
password you copy an the admin.password

Disable anonymous success 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

























pipeline {
    agent any

    tools {
        maven 'maven-17'
        jdk 'jdk17'
        // Remove the sonarQube line if it still causes issues
    }

    environment {
        SCANNER_HOME = tool 'sonar-17'
        DOCKERHUB_USERNAME = 'sethu041220'  // Set this directly to your Docker Hub username
        DOCKER_IMAGE = "${DOCKERHUB_USERNAME}/spotify-app:latest"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Sethu-04/SonarQube-Project-Kastro.git'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh "$SCANNER_HOME/bin/sonar-17 -Dsonar.projectName=Sethu -Dsonar.projectKey=SethuKey -Dsonar.java.binaries=target"
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn package"
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Building Docker Image
                    sh "docker build -t $DOCKER_IMAGE ."
                }
            }
        }

        stage('Docker Push to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "Docker Hub Username: ${DOCKERHUB_USERNAME}"  // Check the username
                        echo "Docker Image: ${DOCKER_IMAGE}"  // Check the image
                        sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                        sh "docker push $DOCKER_IMAGE"
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Stop any existing container with the same name
                    sh "docker stop spotify-app || true && docker rm spotify-app || true"
                    
                    // Running the container
                    sh "docker run -d --name spotify-app -p 5555:5555 $DOCKER_IMAGE"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()  // Clean up the workspace after the build
        }
    }
}

	














